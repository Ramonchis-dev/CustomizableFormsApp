@page "/admin/users"
@using CustomizableFormsApp.Components.Layout
@using CustomizableFormsApp.Models // For ApplicationUser
@using CustomizableFormsApp.Services // For AuthService
@using System.Linq // For Any()
@layout MainLayout
@attribute [Authorize(Roles = "Admin")]
@inject AuthService AuthService
@rendermode RenderMode.InteractiveServer

<PageTitle>User Management</PageTitle>

<h2 class="text-2xl font-semibold mb-4">User Management</h2>

@if (users == null)
{
    <p>Loading users...</p>
}
else
{
    <table class="min-w-full bg-white border border-gray-200 rounded-lg shadow-sm">
        <thead class="bg-gray-100">
            <tr>
                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Full Name</th>
                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Roles</th>
                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
        </thead>
        <tbody class="divide-y divide-gray-200">
            @foreach (var user in users)
            {
                <tr>
                    <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">@user.Email</td>
                    <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">@user.FullName</td>
                    <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">@string.Join(", ", user.Roles)</td>
                    <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-900">
                        @if (user.IsActive)
                        {
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Active</span>
                        }
                        else
                        {
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">Inactive</span>
                        }
                    </td>
                    <td class="px-4 py-2 whitespace-nowrap text-right text-sm font-medium">
                        <button class="text-indigo-600 hover:text-indigo-900"
                                @onclick="() => EditUser(user.Id)">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserDto> users = new();

    protected override async Task OnInitializedAsync()
    {
        var applicationUsers = await AuthService.GetAllUsersAsync();

        users = new List<UserDto>();
        foreach (var appUser in applicationUsers)
        {
            var userDto = new UserDto
            {
                Id = appUser.Id,
                Email = appUser.Email ?? "N/A",
                FullName = appUser.FullName, // Accessing the FullName property from ApplicationUser
                IsActive = true // Placeholder: You might want to check appUser.LockoutEnd for actual active status
            };
            userDto.Roles = (await AuthService.GetUserRolesAsync(appUser)).ToList();
            users.Add(userDto);
        }
    }

    private void EditUser(string userId)
    {
        // Navigation to user edit page would go here
        // Example: Navigation.NavigateTo($"/admin/users/edit/{userId}");
    }

    public class UserDto
    {
        public string Id { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
        public List<string> Roles { get; set; } = new();
        public bool IsActive { get; set; }
    }
}
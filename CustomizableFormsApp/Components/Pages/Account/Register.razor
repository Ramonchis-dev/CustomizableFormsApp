@page "/account/register"
@using CustomizableFormsApp.Components.Layout
@using System.ComponentModel.DataAnnotations
@layout MainLayout
@inject AuthService AuthService
@inject NavigationManager Navigation
@rendermode RenderMode.InteractiveServer

<PageTitle>Register</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3>Create a New Account</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText @bind-Value="registerModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <InputText type="password" @bind-Value="registerModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Confirm Password</label>
                        <InputText type="password" @bind-Value="registerModel.ConfirmPassword" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                    </div>

                    <button type="submit" class="btn btn-primary w-100">Register</button>
                </EditForm>

                <div class="mt-3 text-center">
                    Already have an account? <a href="/login">Login here</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string? errorMessage;

    private async Task HandleRegistration()
    {
        errorMessage = null;
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        var result = await AuthService.RegisterUserAsync(registerModel.Email, registerModel.Password, registerModel.FirstName, registerModel.LastName);

        if (result.Succeeded)
        {
            Navigation.NavigateTo("/", forceLoad: true); // Redirect to home after successful registration
        }
        else
        {
            errorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }

    public class RegisterModel
    {
        [Required]
        public string FirstName { get; set; } = string.Empty;

        [Required]
        public string LastName { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
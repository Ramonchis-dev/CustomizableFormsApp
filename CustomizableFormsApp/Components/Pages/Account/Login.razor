@page "/account/login"
@using CustomizableFormsApp.Components.Layout
@using CustomizableFormsApp.Models
@using CustomizableFormsApp.Services
@using System.ComponentModel.DataAnnotations
@inject AuthService AuthService
@inject NavigationManager Navigation
@layout MainLayout
@rendermode RenderMode.InteractiveServer

<PageTitle>Log In</PageTitle>

@* REMOVE OR CONVERT THIS COMMENT: // Added for Required, EmailAddress, DataType *@

<div class="card mx-auto mt-5" style="max-width: 400px;">
    <div class="card-header text-center">
        <h3 class="mb-0">Log In</h3>
    </div>
    <div class="card-body">
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <div class="mb-3 form-check">
                <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                <label for="rememberMe" class="form-check-label">Remember me</label>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <button type="submit" class="btn btn-primary w-100">Log In</button>
        </EditForm>
    </div>
    <div class="card-footer text-center">
        Don't have an account? <a href="/account/register">Register here</a>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;
        var result = await AuthService.PasswordSignInAsync(loginModel.Email, loginModel.Password, loginModel.RememberMe);

        if (result.Succeeded)
        {
            Navigation.NavigateTo("/", forceLoad: true); // Force full reload to update auth state
        }
        else if (result.IsLockedOut)
        {
            errorMessage = "Account locked out.";
        }
        else if (result.IsNotAllowed)
        {
            errorMessage = "Login not allowed.";
        }
        else
        {
            errorMessage = "Invalid login attempt.";
        }
    }

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}
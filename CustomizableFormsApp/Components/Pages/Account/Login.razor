@page "/account/login"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using CustomizableFormsApp.Models
@using CustomizableFormsApp.Services
@using System.ComponentModel.DataAnnotations // Added for Required, EmailAddress, DataType
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode RenderMode.InteractiveServer

<PageTitle>Log In</PageTitle>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card bg-white p-6 rounded-lg shadow-sm max-w-md mx-auto mt-10">
        <div class="card-header border-b pb-4 mb-4 text-center">
            <h3 class="text-2xl font-semibold text-gray-800">Log In</h3>
        </div>
        <div class="card-body">
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                <InputText @bind-Value="loginModel.Email" class="form-input block w-full rounded-md border-gray-300 shadow-sm" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                <InputText @bind-Value="loginModel.Password" type="password" class="form-input block w-full rounded-md border-gray-300 shadow-sm" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <div class="mb-4 flex items-center">
                <InputCheckbox @bind-Value="loginModel.RememberMe" Id="rememberMe" class="form-checkbox h-4 w-4 text-indigo-600 border-gray-300 rounded" />
                <label for="rememberMe" class="ml-2 block text-sm text-gray-900">Remember me</label>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <span class="block sm:inline">@errorMessage</span>
                </div>
            }
        </div>
        <div class="card-footer pt-4 border-t mt-4 flex justify-end">
            <button type="submit" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Log In
            </button>
        </div>
    </div>
</EditForm>

<div class="text-center mt-4">
    <p class="text-sm text-gray-600">Don't have an account? <NavLink class="font-medium text-indigo-600 hover:text-indigo-500" href="/account/register">Register here</NavLink></p>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;
        var result = await AuthService.PasswordSignInAsync(loginModel.Email, loginModel.Password, loginModel.RememberMe);

        if (result.Succeeded)
        {
            // The standard AuthenticationStateProvider will automatically update after SignInManager.PasswordSignInAsync
            // You can optionally call GetAuthenticationStateAsync to force a re-evaluation immediately,
            // but Navigation.NavigateTo("/") often handles this by triggering a new render cycle.
            await AuthenticationStateProvider.GetAuthenticationStateAsync(); // Force update auth state
            Navigation.NavigateTo("/");
        }
        else if (result.IsLockedOut)
        {
            errorMessage = "Account locked out.";
        }
        else if (result.IsNotAllowed)
        {
            errorMessage = "Login not allowed. Confirm your email.";
        }
        else
        {
            errorMessage = "Invalid login attempt.";
        }
    }

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}
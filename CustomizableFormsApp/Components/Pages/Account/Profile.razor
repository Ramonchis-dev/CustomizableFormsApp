@page "/account/profile"
@using CustomizableFormsApp.Components.Layout
@using CustomizableFormsApp.Models
@using CustomizableFormsApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout MainLayout
@rendermode RenderMode.InteractiveServer

<PageTitle>Profile</PageTitle>

<AuthorizeView>
    <Authorized Context="authContext">
        @if (user == null)
        {
            <p>Loading profile...</p>
        }
        else
        {
            <h2 class="text-2xl font-semibold mb-4">User Profile</h2>

            <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700">First Name</label>
                    <InputText @bind-Value="user.FirstName" class="form-input mt-1 block w-full rounded-md border-gray-300" />
                    <ValidationMessage For="@(() => user.FirstName)" />
                </div>

                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700">Last Name</label>
                    <InputText @bind-Value="user.LastName" class="form-input mt-1 block w-full rounded-md border-gray-300" />
                    <ValidationMessage For="@(() => user.LastName)" />
                </div>

                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700">Email</label>
                    <InputText @bind-Value="user.Email" class="form-input mt-1 block w-full rounded-md border-gray-300" />
                    <ValidationMessage For="@(() => user.Email)" />
                </div>

                @if (!string.IsNullOrEmpty(message))
                {
                    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
                        <span class="block sm:inline">@message</span>
                    </div>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                        <span class="block sm:inline">@errorMessage</span>
                    </div>
                }

                <div class="mt-6 flex justify-end">
                    <button type="submit" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Update Profile
                    </button>
                </div>
            </EditForm>
        }
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to view your profile.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private ApplicationUser? user;
    private string? message;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = await AuthService.GetCurrentUserAsync(authState.User);
    }

    private async Task HandleValidSubmit()
    {
        if (user == null) return;

        message = null;
        errorMessage = null;

        var result = await AuthService.UpdateProfileAsync(user);

        if (result.Succeeded)
        {
            message = "Profile updated successfully!";
        }
        else
        {
            errorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }
}
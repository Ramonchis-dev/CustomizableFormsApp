@page "/templates/edit/{TemplateId:guid}"
@inject TemplateService TemplateService
@inject NavigationManager Navigation

<EditForm Model="@template" OnValidSubmit="SaveTemplate">
    <div class="mb-3">
        <label class="form-label">Title</label>
        <InputText @bind-Value="template.Title" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputTextArea @bind-Value="template.Description" class="form-control" />
    </div>

    <h3>Questions</h3>

    @foreach (var question in template.Questions.OrderBy(q => q.OrderIndex))
    {
        <div class="card mb-3">
            <div class="card-header">
                <div class="d-flex justify-content-between">
                    <span>Question @(question.OrderIndex + 1)</span>
                    <button type="button" class="btn btn-sm btn-danger"
                            @onclick="() => DeleteQuestion(question)">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Question Text</label>
                    <InputText @bind-Value="question.Text" class="form-control" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Question Type</label>
                    <InputSelect @bind-Value="question.Type" class="form-select"
                                 @onchange="() => QuestionTypeChanged(question)">
                        @foreach (var type in Enum.GetValues<QuestionType>())
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                </div>

                @if (question.Type == QuestionType.Dropdown ||
                            question.Type == QuestionType.MultiSelect)
                {
                    <h5>Options</h5>
                    @foreach (var option in question.Options.OrderBy(o => o.OrderIndex))
                    {
                        <div class="input-group mb-2">
                            <input type="text" class="form-control"
                                   @bind="option.Text" placeholder="Option text" />
                            <button class="btn btn-outline-danger" type="button"
                                    @onclick="() => DeleteOption(question, option)">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    }
                    <button type="button" class="btn btn-sm btn-primary"
                            @onclick="() => AddOption(question)">
                        Add Option
                    </button>
                }
            </div>
        </div>
    }

    <button type="button" class="btn btn-primary mb-3" @onclick="AddQuestion">
        Add Question
    </button>

    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Save Template</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter] public Guid TemplateId { get; set; }

    private Template template = new Template();
    private int questionCounter = 0;

    protected override async Task OnParametersSetAsync()
    {
        if (TemplateId == Guid.Empty)
        {
            template = new Template
            {
                Id = Guid.NewGuid(),
                Questions = new List<Question>()
            };
        }
        else
        {
            template = await TemplateService.GetTemplateAsync(TemplateId) ?? new Template();
        }
        questionCounter = template.Questions.Count;
    }

    private void AddQuestion()
    {
        template.Questions.Add(new Question
        {
            Id = Guid.NewGuid(),
            OrderIndex = questionCounter++,
            Options = new List<QuestionOption>()
        });
    }

    private void DeleteQuestion(Question question)
    {
        template.Questions.Remove(question);
        // Re-index remaining questions
        for (int i = 0; i < template.Questions.Count; i++)
        {
            template.Questions[i].OrderIndex = i;
        }
        questionCounter--;
    }

    private void AddOption(Question question)
    {
        question.Options.Add(new QuestionOption
        {
            Id = Guid.NewGuid(),
            OrderIndex = question.Options.Count
        });
    }

    private void DeleteOption(Question question, QuestionOption option)
    {
        question.Options.Remove(option);
        // Re-index remaining options
        for (int i = 0; i < question.Options.Count; i++)
        {
            question.Options[i].OrderIndex = i;
        }
    }

    private void QuestionTypeChanged(Question question)
    {
        // Clear options when switching to non-option type
        if (question.Type != QuestionType.Dropdown &&
            question.Type != QuestionType.MultiSelect)
        {
            question.Options.Clear();
        }
    }

    private async Task SaveTemplate()
    {
        if (TemplateId == Guid.Empty)
        {
            await TemplateService.CreateTemplateAsync(template);
        }
        else
        {
            await TemplateService.UpdateTemplateAsync(template);
        }
        Navigation.NavigateTo("/templates");
    }

    private void Cancel() => Navigation.NavigateTo("/templates");
}
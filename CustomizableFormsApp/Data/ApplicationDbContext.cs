using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using CustomizableFormsApp.Models; // Ensure this matches your ApplicationUser namespace

namespace CustomizableFormsApp.Data
{
    public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        // --- DECLARE YOUR DbSet PROPERTIES HERE ---
        public DbSet<Template> Templates { get; set; } = default!;
        public DbSet<Question> Questions { get; set; } = default!;
        public DbSet<QuestionOption> QuestionOptions { get; set; } = default!;
        public DbSet<FormSubmission> FormSubmissions { get; set; } = default!;
        // --- END DbSet DECLARATIONS ---

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

            // Configure UUIDs as primary keys if not done by default for Npgsql
            // For TemplateId (Guid PK, auto-generated by DB)
            builder.Entity<Template>()
                .Property(t => t.TemplateId)
                .HasDefaultValueSql("gen_random_uuid()");

            // For Question.Id (Guid PK, auto-generated by DB)
            builder.Entity<Question>()
                .Property(q => q.Id)
                .HasDefaultValueSql("gen_random_uuid()");

            // For QuestionOption.Id (Guid PK, auto-generated by DB)
            builder.Entity<QuestionOption>()
                .Property(qo => qo.Id)
                .HasDefaultValueSql("gen_random_uuid()");

            // For FormSubmission.SubmissionId (Guid PK, auto-generated by DB)
            builder.Entity<FormSubmission>()
                .Property(fs => fs.SubmissionId)
                .HasDefaultValueSql("gen_random_uuid()");


            // Ensure JSONB columns are correctly mapped
            builder.Entity<Question>()
                .Property(q => q.ValidationRules)
                .HasColumnType("jsonb"); // Explicitly set for JSONB string

            builder.Entity<FormSubmission>()
                .Property(fs => fs.AnswersJson)
                .HasColumnType("jsonb"); // Explicitly set for JSONB string

            // Configure relationships if not handled by convention
            // Template has many Questions
            builder.Entity<Template>()
                .HasMany(t => t.Questions)
                .WithOne(q => q.Template)
                .HasForeignKey(q => q.TemplateId)
                .OnDelete(DeleteBehavior.Cascade); // Cascade delete questions with template

            // Question has many QuestionOptions
            builder.Entity<Question>()
                .HasMany(q => q.Options)
                .WithOne(qo => qo.Question)
                .HasForeignKey(qo => qo.QuestionId)
                .OnDelete(DeleteBehavior.Cascade); // Cascade delete options with question

            // Template has many FormSubmissions
            builder.Entity<Template>()
                .HasMany(t => t.FormSubmissions)
                .WithOne(fs => fs.Template)
                .HasForeignKey(fs => fs.TemplateId)
                .OnDelete(DeleteBehavior.Cascade); // Cascade delete submissions with template

            // FormSubmission has one SubmitterUser (optional)
            builder.Entity<FormSubmission>()
                .HasOne(fs => fs.SubmitterUser)
                .WithMany() // No navigation property back from ApplicationUser to FormSubmission
                .HasForeignKey(fs => fs.SubmitterUserId)
                .IsRequired(false); // Submitter can be null (anonymous submission)
        }
    }
}